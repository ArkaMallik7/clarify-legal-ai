import { useState, useEffect } from "react";
import { FileText, AlertTriangle, CheckCircle, Loader2, Download, Flag } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { toast } from "@/hooks/use-toast";
import ChatInterface from "./ChatInterface";

interface DocumentAnalysisProps {
  file: File | null;
  text: string;
}

interface AnalysisResult {
  summary: string;
  risks: Array<{
    clause: string;
    severity: 'high' | 'medium' | 'low';
    explanation: string;
  }>;
  unusualClauses: string[];
  confidence: number;
  keyTerms: string[];
}

export default function DocumentAnalysis({ file, text }: DocumentAnalysisProps) {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [activeTab, setActiveTab] = useState("summary");

  useEffect(() => {
    if (file || text) {
      analyzeDocument();
    }
  }, [file, text]);

  const analyzeDocument = async () => {
    setIsAnalyzing(true);
    setProgress(0);

    // Simulate document analysis with progress updates
    const progressInterval = setInterval(() => {
      setProgress(prev => {
        if (prev >= 90) {
          clearInterval(progressInterval);
          return 90;
        }
        return prev + 10;
      });
    }, 300);

    // Simulate API call to analyze document
    setTimeout(() => {
      clearInterval(progressInterval);
      setProgress(100);
      
      // Mock analysis result
      const mockResult: AnalysisResult = {
        summary: "This is a standard service agreement between the service provider and client. The contract outlines terms for software development services, including project scope, timeline, payment terms, and intellectual property rights. The agreement is generally balanced but contains some clauses that require attention.",
        risks: [
          {
            clause: "Unlimited liability clause in Section 7.2",
            severity: "high",
            explanation: "The service provider assumes unlimited liability for any damages, which is unusual and potentially costly."
          },
          {
            clause: "Automatic renewal in Section 12.1",
            severity: "medium",
            explanation: "Contract automatically renews for 1-year terms unless cancelled 60 days in advance."
          },
          {
            clause: "Non-compete clause in Section 9.3",
            severity: "low",
            explanation: "Restricts working with competitors for 6 months after contract ends."
          }
        ],
        unusualClauses: [
          "Arbitration must occur in provider's jurisdiction",
          "Client grants unlimited license to use feedback",
          "No warranty provided for deliverables"
        ],
        confidence: 87,
        keyTerms: ["Payment Terms", "Intellectual Property", "Confidentiality", "Termination", "Liability"]
      };

      setAnalysisResult(mockResult);
      setIsAnalyzing(false);
      
      toast({
        title: "Analysis Complete",
        description: "Your document has been successfully analyzed",
      });
    }, 3000);
  };

  const downloadSummary = () => {
    if (!analysisResult) return;
    
    const summaryText = `
LegalClarify AI - Document Analysis Summary
==========================================

SUMMARY
-------
${analysisResult.summary}

RISK ASSESSMENT
--------------
${analysisResult.risks.map(risk => 
  `• [${risk.severity.toUpperCase()}] ${risk.clause}\n  ${risk.explanation}`
).join('\n\n')}

UNUSUAL CLAUSES
--------------
${analysisResult.unusualClauses.map(clause => `• ${clause}`).join('\n')}

CONFIDENCE SCORE: ${analysisResult.confidence}%

KEY TERMS IDENTIFIED
-------------------
${analysisResult.keyTerms.join(', ')}

---
Generated by LegalClarify AI
This analysis is for informational purposes only and does not constitute legal advice.
    `;

    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'document-analysis-summary.txt';
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Summary Downloaded",
      description: "The analysis summary has been saved to your device",
    });
  };

  if (isAnalyzing) {
    return (
      <Card className="p-8">
        <div className="text-center">
          <Loader2 className="w-12 h-12 mx-auto mb-4 animate-spin text-accent" />
          <h3 className="text-lg font-semibold mb-2">Analyzing Your Document</h3>
          <p className="text-sm text-muted-foreground mb-4">
            Using AI to extract and simplify legal information...
          </p>
          <Progress value={progress} className="max-w-xs mx-auto" />
          <p className="text-xs text-muted-foreground mt-2">{progress}% Complete</p>
        </div>
      </Card>
    );
  }

  if (!analysisResult) {
    return null;
  }

  return (
    <div className="space-y-6">
      <Card className="p-6">
        <div className="flex items-start justify-between mb-4">
          <div className="flex items-center gap-3">
            <FileText className="w-5 h-5 text-accent" />
            <div>
              <h3 className="font-semibold">{file?.name || "Pasted Text"}</h3>
              <div className="flex items-center gap-4 mt-1">
                <Badge variant="outline" className="confidence-badge">
                  Confidence: {analysisResult.confidence}%
                </Badge>
                {analysisResult.unusualClauses.length > 0 && (
                  <Badge variant="destructive" className="gap-1">
                    <Flag className="w-3 h-3" />
                    {analysisResult.unusualClauses.length} Unusual Clauses
                  </Badge>
                )}
              </div>
            </div>
          </div>
          <Button variant="outline" size="sm" onClick={downloadSummary}>
            <Download className="w-4 h-4 mr-2" />
            Download Summary
          </Button>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="summary">Summary</TabsTrigger>
            <TabsTrigger value="risks">Risk Analysis</TabsTrigger>
            <TabsTrigger value="terms">Key Terms</TabsTrigger>
            <TabsTrigger value="chat">Ask Questions</TabsTrigger>
          </TabsList>

          <TabsContent value="summary" className="mt-4">
            <div className="space-y-4">
              <div>
                <h4 className="font-semibold mb-2 flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-success" />
                  Plain English Summary
                </h4>
                <p className="text-sm leading-relaxed">{analysisResult.summary}</p>
              </div>
              
              {analysisResult.unusualClauses.length > 0 && (
                <div>
                  <h4 className="font-semibold mb-2 flex items-center gap-2">
                    <Flag className="w-4 h-4 text-warning" />
                    Unusual Clauses Detected
                  </h4>
                  <ul className="space-y-1">
                    {analysisResult.unusualClauses.map((clause, index) => (
                      <li key={index} className="text-sm text-muted-foreground flex items-start gap-2">
                        <span className="text-warning mt-1">•</span>
                        <span>{clause}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </TabsContent>

          <TabsContent value="risks" className="mt-4">
            <div className="space-y-3">
              {analysisResult.risks.map((risk, index) => (
                <div key={index} className="p-4 rounded-lg bg-card border border-border">
                  <div className="flex items-start gap-3">
                    <AlertTriangle className={`w-5 h-5 mt-0.5 ${
                      risk.severity === 'high' ? 'text-destructive' :
                      risk.severity === 'medium' ? 'text-warning' :
                      'text-muted-foreground'
                    }`} />
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <span className={`font-semibold text-sm ${
                          risk.severity === 'high' ? 'risk-highlight' : ''
                        }`}>
                          {risk.clause}
                        </span>
                        <Badge variant={
                          risk.severity === 'high' ? 'destructive' :
                          risk.severity === 'medium' ? 'default' :
                          'secondary'
                        } className="text-xs">
                          {risk.severity}
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground">{risk.explanation}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="terms" className="mt-4">
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {analysisResult.keyTerms.map((term, index) => (
                <div key={index} className="p-3 rounded-lg bg-secondary text-center">
                  <span className="text-sm font-medium">{term}</span>
                </div>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="chat" className="mt-4">
            <ChatInterface documentContext={analysisResult} />
          </TabsContent>
        </Tabs>
      </Card>
    </div>
  );
}